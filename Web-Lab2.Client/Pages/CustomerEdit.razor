@page "/customers/create"
@page "/customers/edit/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Web_Lab2.Client.Models
@using Web_Lab2.Client.Services
@inject CustomerService CustomerService
@inject NavigationManager NavigationManager

<h3>@pageTitle</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@customer" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="firstName" class="form-label">First Name</label>
                <InputText id="firstName" @bind-Value="customer.FirstName" class="form-control" />
                <ValidationMessage For="@(() => customer.FirstName)" />
            </div>

            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name</label>
                <InputText id="lastName" @bind-Value="customer.LastName" class="form-control" />
                <ValidationMessage For="@(() => customer.LastName)" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" @bind-Value="customer.Email" class="form-control" disabled="@isEditMode" />
                <ValidationMessage For="@(() => customer.Email)" />
            </div>

            <div class="mb-3">
                <label for="phoneNumber" class="form-label">Phone Number</label>
                <InputText id="phoneNumber" @bind-Value="customer.Phone" class="form-control" />
                <ValidationMessage For="@(() => customer.Phone)" />
            </div>

            <div class="mb-3">
                <label for="address" class="form-label">Address</label>
                <InputText id="address" @bind-Value="customer.Address" class="form-control" />
                <ValidationMessage For="@(() => customer.Address)" />
            </div>

            <div class="mb-3">
                <label for="city" class="form-label">City</label>
                <InputText id="city" @bind-Value="customer.City" class="form-control" />
                <ValidationMessage For="@(() => customer.City)" />
            </div>

            <div class="mb-3">
                <label for="postalCode" class="form-label">Postal Code</label>
                <InputText id="postalCode" @bind-Value="customer.PostalCode" class="form-control" />
                <ValidationMessage For="@(() => customer.PostalCode)" />
            </div>

            <div class="mb-3">
                <label for="country" class="form-label">Country</label>
                <InputText id="country" @bind-Value="customer.Country" class="form-control" />
                <ValidationMessage For="@(() => customer.Country)" />
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/customers")'>Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Customer customer = new Customer();
    private string pageTitle;
    private bool isEditMode => Id.HasValue;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (isEditMode)
        {
            pageTitle = "Edit Customer";
            customer = await CustomerService.GetCustomerAsync(Id.Value);
        }
        else
        {
            pageTitle = "Create New Customer";
            customer = new Customer();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditMode)
            {
                await CustomerService.UpdateCustomerAsync(Id.Value, customer);
            }
            else
            {
                await CustomerService.CreateCustomerAsync(customer);
            }

            NavigationManager.NavigateTo("/customers");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}